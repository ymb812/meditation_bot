version: '3.3'

services:
  postgres:
    image: postgres:latest
    environment:
      TZ: Europe/Moscow
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    
    container_name: bot_with_django_postgres
    restart: 'always'
    ports:
      - '5432:5432'
    volumes:
      - ./postgresql/data:/var/lib/postgresql/data
    networks:
      - bot_with_django_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 5s
      timeout: 30s
      retries: 5

  redis:
    image: redis:latest
    restart: always
    ports:
      - '6379'
    volumes:
      - ./redis:/root/redis
    networks:
      - bot_with_django_db


  web:
    build:
      context: .
      dockerfile: DockerfileAdmin
    container_name: bot_with_django_django
    restart: always
    env_file:
      - .env
    ports:
      - '8000:8000'
    networks:
      - bot_with_django_db
    environment:
      DB_HOST: postgres
      TZ: Europe/Moscow
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  bot:
    build:
      context: .
      dockerfile: DockerfileBot
    container_name: dot_with_django_bot
    restart: 'always'
    networks:
      - bot_with_django_db
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      TZ: Europe/Moscow
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  broadcaster:
    build:
      context: .
      dockerfile: DockerfileBroadcaster
    container_name: bot_with_django_broadcaster
    restart: 'always'
    networks:
      - bot_with_django_db
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      TZ: Europe/Moscow
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

networks:
  bot_with_django_db:
